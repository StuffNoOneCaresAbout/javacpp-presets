// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_hset_if extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_hset_if() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_hset_if(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_hset_if(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_hset_if position(long position) {
        return (lsquic_hset_if)super.position(position);
    }
    @Override public lsquic_hset_if getPointer(long i) {
        return new lsquic_hset_if((Pointer)this).position(position + i);
    }

    /**
     * Create a new header set.  This object is (and must be) fetched from a
     * stream by calling \ref lsquic_stream_get_hset() before the stream can
     * be read.
     *
     * {@code stream' may be set to NULL in server mode.
     */
    public static class Hsi_create_header_set_Pointer_lsquic_stream_t_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Hsi_create_header_set_Pointer_lsquic_stream_t_int(Pointer p) { super(p); }
        protected Hsi_create_header_set_Pointer_lsquic_stream_t_int() { allocate(); }
        private native void allocate();
        public native Pointer call(Pointer hsi_ctx, lsquic_stream_t stream,
                                        int is_push_promise);
    }
    public native Hsi_create_header_set_Pointer_lsquic_stream_t_int hsi_create_header_set(); public native lsquic_hset_if hsi_create_header_set(Hsi_create_header_set_Pointer_lsquic_stream_t_int setter);
    /**
     * Return a header set prepared for decoding.  If {@code hdr' is NULL, this
     * means return a new structure with at least }space' bytes available
     * in the decoder buffer.  On success, a newly prepared header is
     * returned.
     *
     * If {@code hdr' is not NULL, it means there was not enough decoder buffer
     * and it must be increased to at least }space' bytes.  {@code buf', }val_len',
     * and {@code name_offset' member of the }hdr' structure may change.  On
     * success, the return value is the same as {@code hdr'.
     *
     * If NULL is returned, the space cannot be allocated.
     */
    public static class Hsi_prepare_decode_Pointer_lsxpack_header_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Hsi_prepare_decode_Pointer_lsxpack_header_long(Pointer p) { super(p); }
        protected Hsi_prepare_decode_Pointer_lsxpack_header_long() { allocate(); }
        private native void allocate();
        public native lsxpack_header call(Pointer hdr_set,
                                                  lsxpack_header hdr,
                                                  @Cast("size_t") long space);
    }
    public native Hsi_prepare_decode_Pointer_lsxpack_header_long hsi_prepare_decode(); public native lsquic_hset_if hsi_prepare_decode(Hsi_prepare_decode_Pointer_lsxpack_header_long setter);
    /**
     * Process new header.  Return 0 on success, a positive value if a header
     * error occured, or a negative value on any other error.
     *
     * A positive return value will result in cancellation of associated
     * stream.
     *
     * A negative return value will result in connection being aborted.
     *
     * {@code hdr_set' is the header set object returned by
     * @ref hsi_create_header_set().
     *
     * }hdr' is the header returned by \ref {@code hsi_prepare_decode'.
     *
     * If }hdr' is NULL, this means that no more header are going to be
     * added to the set.
     */
    public static class Hsi_process_header_Pointer_lsxpack_header extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Hsi_process_header_Pointer_lsxpack_header(Pointer p) { super(p); }
        protected Hsi_process_header_Pointer_lsxpack_header() { allocate(); }
        private native void allocate();
        public native int call(Pointer hdr_set, lsxpack_header hdr);
    }
    public native Hsi_process_header_Pointer_lsxpack_header hsi_process_header(); public native lsquic_hset_if hsi_process_header(Hsi_process_header_Pointer_lsxpack_header setter);
    /**
     * Discard header set.  This is called for unclaimed header sets and
     * header sets that had an error.
     */
    public static class Hsi_discard_header_set_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Hsi_discard_header_set_Pointer(Pointer p) { super(p); }
        protected Hsi_discard_header_set_Pointer() { allocate(); }
        private native void allocate();
        public native void call(Pointer hdr_set);
    }
    public native Hsi_discard_header_set_Pointer hsi_discard_header_set(); public native lsquic_hset_if hsi_discard_header_set(Hsi_discard_header_set_Pointer setter);
    /**
     * These flags specify properties of decoded headers passed to
     * hsi_process_header().  This is only applicable to QPACK headers;
     * HPACK library header properties are based on compilation, not
     * run-time, options.
     */
    public native @Cast("lsquic_hsi_flag") int hsi_flags(); public native lsquic_hset_if hsi_flags(int setter);
}
