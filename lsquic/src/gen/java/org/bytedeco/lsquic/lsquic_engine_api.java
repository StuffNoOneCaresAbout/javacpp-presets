// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


/**
 * This struct contains a list of all callbacks that are used by the engine
 * to communicate with the user code.  Most of these are optional, while
 * the following are mandatory:
 *
 *  \ref ea_stream_if       The stream interface.
 *  \ref ea_packets_out     Function to send packets.
 *  \ref ea_lookup_cert     Function to look up certificates by SNI (used
 *                            in server mode).
 *
 * A pointer to this structure is passed to engine constructor
 * \ref lsquic_engine_new().
 */
@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_engine_api extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_engine_api() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_engine_api(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_engine_api(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_engine_api position(long position) {
        return (lsquic_engine_api)super.position(position);
    }
    @Override public lsquic_engine_api getPointer(long i) {
        return new lsquic_engine_api((Pointer)this).position(position + i);
    }

    public native @Const lsquic_engine_settings ea_settings(); public native lsquic_engine_api ea_settings(lsquic_engine_settings setter);   /* Optional */
    /** Stream interface is required to manage connections and streams. */
    public native @Const lsquic_stream_if ea_stream_if(); public native lsquic_engine_api ea_stream_if(lsquic_stream_if setter);
    public native Pointer ea_stream_if_ctx(); public native lsquic_engine_api ea_stream_if_ctx(Pointer setter);
    /** Function to send packets out is required. */
    public native lsquic_packets_out_f ea_packets_out(); public native lsquic_engine_api ea_packets_out(lsquic_packets_out_f setter);
    public native Pointer ea_packets_out_ctx(); public native lsquic_engine_api ea_packets_out_ctx(Pointer setter);
    /** Function to look up certificates by SNI is used in server mode. */
    public native @ByRef lsquic_lookup_cert_f ea_lookup_cert(); public native lsquic_engine_api ea_lookup_cert(lsquic_lookup_cert_f setter);
    public native Pointer ea_cert_lu_ctx(); public native lsquic_engine_api ea_cert_lu_ctx(Pointer setter);
    /** Mandatory callback for server, optional for client. */
    public static class Ea_get_ssl_ctx_Pointer_sockaddr extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Ea_get_ssl_ctx_Pointer_sockaddr(Pointer p) { super(p); }
        protected Ea_get_ssl_ctx_Pointer_sockaddr() { allocate(); }
        private native void allocate();
        public native ssl_ctx_st call(Pointer peer_ctx,
                                                    @Const sockaddr local);
    }
    public native Ea_get_ssl_ctx_Pointer_sockaddr ea_get_ssl_ctx(); public native lsquic_engine_api ea_get_ssl_ctx(Ea_get_ssl_ctx_Pointer_sockaddr setter);
    /**
     * Shared hash interface is optional.  If set to zero, performance of
     * multiple LSQUIC instances will be degraded.
     */
    public native @Const lsquic_shared_hash_if ea_shi(); public native lsquic_engine_api ea_shi(lsquic_shared_hash_if setter);
    public native Pointer ea_shi_ctx(); public native lsquic_engine_api ea_shi_ctx(Pointer setter);
    /**
     * Memory interface is optional.
     */
    public native @Const lsquic_packout_mem_if ea_pmi(); public native lsquic_engine_api ea_pmi(lsquic_packout_mem_if setter);
    public native Pointer ea_pmi_ctx(); public native lsquic_engine_api ea_pmi_ctx(Pointer setter);
    /**
     * Optional interface to report new and old source connection IDs.
     */
    public native lsquic_cids_update_f ea_new_scids(); public native lsquic_engine_api ea_new_scids(lsquic_cids_update_f setter);
    public native lsquic_cids_update_f ea_live_scids(); public native lsquic_engine_api ea_live_scids(lsquic_cids_update_f setter);
    public native lsquic_cids_update_f ea_old_scids(); public native lsquic_engine_api ea_old_scids(lsquic_cids_update_f setter);
    public native Pointer ea_cids_update_ctx(); public native lsquic_engine_api ea_cids_update_ctx(Pointer setter);
    /**
     * Function to verify server certificate.  The chain contains at least
     * one element.  The first element in the chain is the server
     * certificate.  The chain belongs to the library.  If you want to
     * retain it, call sk_X509_up_ref().
     *
     * 0 is returned on success, -1 on error.
     *
     * If the function pointer is not set, no verification is performed
     * (the connection is allowed to proceed).
     */
    public static class Ea_verify_cert_Pointer_stack_st_X509 extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Ea_verify_cert_Pointer_stack_st_X509(Pointer p) { super(p); }
        protected Ea_verify_cert_Pointer_stack_st_X509() { allocate(); }
        private native void allocate();
        public native int call(Pointer verify_ctx,
                                                    stack_st_X509 chain);
    }
    public native Ea_verify_cert_Pointer_stack_st_X509 ea_verify_cert(); public native lsquic_engine_api ea_verify_cert(Ea_verify_cert_Pointer_stack_st_X509 setter);
    public native Pointer ea_verify_ctx(); public native lsquic_engine_api ea_verify_ctx(Pointer setter);

    /**
     * Optional header set interface.  If not specified, the incoming headers
     * are converted to HTTP/1.x format and are read from stream and have to
     * be parsed again.
     */
    public native @Const lsquic_hset_if ea_hsi_if(); public native lsquic_engine_api ea_hsi_if(lsquic_hset_if setter);
    public native Pointer ea_hsi_ctx(); public native lsquic_engine_api ea_hsi_ctx(Pointer setter);

    /**
     * If set, engine will print cumulative connection statistics to this
     * file just before it is destroyed.  (Must be compiled with
     * -DLSQUIC_CONN_STATS=1).
     */
    public native Pointer ea_stats_fh(); public native lsquic_engine_api ea_stats_fh(Pointer setter);

    /**
     * The optional ALPN string is used by the client if \ref LSENG_HTTP
     * is not set.
     */
    public native @Cast("const char*") BytePointer ea_alpn(); public native lsquic_engine_api ea_alpn(BytePointer setter);

    /**
     * Optional interface to control the creation of connection IDs
     */
    public static class Ea_generate_scid_lsquic_conn_t_lsquic_cid_t_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Ea_generate_scid_lsquic_conn_t_lsquic_cid_t_int(Pointer p) { super(p); }
        protected Ea_generate_scid_lsquic_conn_t_lsquic_cid_t_int() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t arg0,
                                                        lsquic_cid_t arg1, @Cast("unsigned") int arg2);
    }
    public native Ea_generate_scid_lsquic_conn_t_lsquic_cid_t_int ea_generate_scid(); public native lsquic_engine_api ea_generate_scid(Ea_generate_scid_lsquic_conn_t_lsquic_cid_t_int setter);
}
