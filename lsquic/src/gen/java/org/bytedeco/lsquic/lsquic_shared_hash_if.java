// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


/**
 * The shared hash interface is used to share data between multiple LSQUIC
 * instances.
 */
@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_shared_hash_if extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_shared_hash_if() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_shared_hash_if(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_shared_hash_if(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_shared_hash_if position(long position) {
        return (lsquic_shared_hash_if)super.position(position);
    }
    @Override public lsquic_shared_hash_if getPointer(long i) {
        return new lsquic_shared_hash_if((Pointer)this).position(position + i);
    }

    /**
     * If you want your item to never expire, set {@code expiry' to zero.
     * Returns 0 on success, -1 on failure.
     *
     * If inserted successfully, }free()' will be called on {@code data' and 'key'
     * pointer when the element is deleted, whether due to expiration
     * or explicit deletion.
     */
    public static class Shi_insert_Pointer_Pointer_int_Pointer_int_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Shi_insert_Pointer_Pointer_int_Pointer_int_Pointer(Pointer p) { super(p); }
        protected Shi_insert_Pointer_Pointer_int_Pointer_int_Pointer() { allocate(); }
        private native void allocate();
        public native int call(Pointer shi_ctx, Pointer key, @Cast("unsigned") int key_sz,
                          Pointer data, @Cast("unsigned") int data_sz, @ByVal @Cast("time_t*") Pointer expiry);
    }
    public native Shi_insert_Pointer_Pointer_int_Pointer_int_Pointer shi_insert(); public native lsquic_shared_hash_if shi_insert(Shi_insert_Pointer_Pointer_int_Pointer_int_Pointer setter);
    /**
     * Returns 0 on success, -1 on failure.
     */
    public static class Shi_delete_Pointer_Pointer_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Shi_delete_Pointer_Pointer_int(Pointer p) { super(p); }
        protected Shi_delete_Pointer_Pointer_int() { allocate(); }
        private native void allocate();
        public native int call(Pointer shi_ctx, @Const Pointer key, @Cast("unsigned") int key_sz);
    }
    public native Shi_delete_Pointer_Pointer_int shi_delete(); public native lsquic_shared_hash_if shi_delete(Shi_delete_Pointer_Pointer_int setter);

    /**
     * {@code data' is pointed to the result and }data_sz' is set to the
     * object size.  The implementation may choose to copy the object
     * into buffer pointed to by {@code data', so you should have it ready.
     *
     * @retval  1   found.
     * @retval  0   not found.
     * @retval -1   error (perhaps not enough room in }data' if copy was
     *                attempted).
     */
    public static class Shi_lookup_Pointer_Pointer_int_PointerPointer_IntPointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Shi_lookup_Pointer_Pointer_int_PointerPointer_IntPointer(Pointer p) { super(p); }
        protected Shi_lookup_Pointer_Pointer_int_PointerPointer_IntPointer() { allocate(); }
        private native void allocate();
        public native int call(Pointer shi_ctx, @Const Pointer key, @Cast("unsigned") int key_sz,
                                         @Cast("void**") PointerPointer data, @Cast("unsigned*") IntPointer data_sz);
    }
    public native Shi_lookup_Pointer_Pointer_int_PointerPointer_IntPointer shi_lookup(); public native lsquic_shared_hash_if shi_lookup(Shi_lookup_Pointer_Pointer_int_PointerPointer_IntPointer setter);
}
