// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


/**
 * Used as argument to \ref lsquic_stream_writef()
 */
@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_reader extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_reader() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_reader(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_reader(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_reader position(long position) {
        return (lsquic_reader)super.position(position);
    }
    @Override public lsquic_reader getPointer(long i) {
        return new lsquic_reader((Pointer)this).position(position + i);
    }

    /**
     * Not a ssize_t because the read function is not supposed to return
     * an error.  If an error occurs in the read function (for example, when
     * reading from a file fails), it is supposed to deal with the error
     * itself.
     */
    public static class Lsqr_read_Pointer_Pointer_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Lsqr_read_Pointer_Pointer_long(Pointer p) { super(p); }
        protected Lsqr_read_Pointer_Pointer_long() { allocate(); }
        private native void allocate();
        public native @Cast("size_t") long call(Pointer lsqr_ctx, Pointer buf, @Cast("size_t") long count);
    }
    public native Lsqr_read_Pointer_Pointer_long lsqr_read(); public native lsquic_reader lsqr_read(Lsqr_read_Pointer_Pointer_long setter);
    /**
     * Return number of bytes remaining in the reader.
     */
    public static class Lsqr_size_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Lsqr_size_Pointer(Pointer p) { super(p); }
        protected Lsqr_size_Pointer() { allocate(); }
        private native void allocate();
        public native @Cast("size_t") long call(Pointer lsqr_ctx);
    }
    public native Lsqr_size_Pointer lsqr_size(); public native lsquic_reader lsqr_size(Lsqr_size_Pointer setter);
    public native Pointer lsqr_ctx(); public native lsquic_reader lsqr_ctx(Pointer setter);
}
