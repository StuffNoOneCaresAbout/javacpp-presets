// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


/**
 * The packet out memory interface is used by LSQUIC to get buffers to
 * which outgoing packets will be written before they are passed to
 * ea_packets_out callback.
 *
 * If not specified, malloc() and free() are used.
 */
@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_packout_mem_if extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_packout_mem_if() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_packout_mem_if(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_packout_mem_if(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_packout_mem_if position(long position) {
        return (lsquic_packout_mem_if)super.position(position);
    }
    @Override public lsquic_packout_mem_if getPointer(long i) {
        return new lsquic_packout_mem_if((Pointer)this).position(position + i);
    }

    /**
     * Allocate buffer for sending.
     */
    public static class Pmi_allocate_Pointer_Pointer_lsquic_conn_ctx_t_short_byte extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Pmi_allocate_Pointer_Pointer_lsquic_conn_ctx_t_short_byte(Pointer p) { super(p); }
        protected Pmi_allocate_Pointer_Pointer_lsquic_conn_ctx_t_short_byte() { allocate(); }
        private native void allocate();
        public native Pointer call(Pointer pmi_ctx, Pointer peer_ctx, lsquic_conn_ctx_t arg2, @Cast("unsigned short") short sz,
                                                                    @Cast("char") byte is_ipv6);
    }
    public native Pmi_allocate_Pointer_Pointer_lsquic_conn_ctx_t_short_byte pmi_allocate(); public native lsquic_packout_mem_if pmi_allocate(Pmi_allocate_Pointer_Pointer_lsquic_conn_ctx_t_short_byte setter);
    /**
     * This function is used to release the allocated buffer after it is
     * sent via \ref ea_packets_out.
     */
    public static class Pmi_release_Pointer_Pointer_Pointer_byte extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Pmi_release_Pointer_Pointer_Pointer_byte(Pointer p) { super(p); }
        protected Pmi_release_Pointer_Pointer_Pointer_byte() { allocate(); }
        private native void allocate();
        public native void call(Pointer pmi_ctx, Pointer peer_ctx, Pointer buf,
                                                                    @Cast("char") byte is_ipv6);
    }
    public native Pmi_release_Pointer_Pointer_Pointer_byte pmi_release(); public native lsquic_packout_mem_if pmi_release(Pmi_release_Pointer_Pointer_Pointer_byte setter);
    /**
     * If allocated buffer is not going to be sent, return it to the caller
     * using this function.
     */
    public static class Pmi_return_Pointer_Pointer_Pointer_byte extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Pmi_return_Pointer_Pointer_Pointer_byte(Pointer p) { super(p); }
        protected Pmi_return_Pointer_Pointer_Pointer_byte() { allocate(); }
        private native void allocate();
        public native void call(Pointer pmi_ctx, Pointer peer_ctx, Pointer buf,
                                                                    @Cast("char") byte is_ipv6);
    }
    public native Pmi_return_Pointer_Pointer_Pointer_byte pmi_return(); public native lsquic_packout_mem_if pmi_return(Pmi_return_Pointer_Pointer_Pointer_byte setter);
}
