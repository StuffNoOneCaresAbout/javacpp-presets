// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.lsquic;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.lsquic.global.lsquic.*;


/**
 * \struct lsquic_stream_if
 * \brief The definitions of callback functions called by lsquic_stream to
 * process events.
 *
 */
@Properties(inherit = org.bytedeco.lsquic.presets.lsquic.class)
public class lsquic_stream_if extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public lsquic_stream_if() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public lsquic_stream_if(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public lsquic_stream_if(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public lsquic_stream_if position(long position) {
        return (lsquic_stream_if)super.position(position);
    }
    @Override public lsquic_stream_if getPointer(long i) {
        return new lsquic_stream_if((Pointer)this).position(position + i);
    }


    /**
     * Use \ref lsquic_conn_get_ctx to get back the context.  It is
     * OK for this function to return NULL.
     */
    public static class On_new_conn_Pointer_lsquic_conn_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_new_conn_Pointer_lsquic_conn_t(Pointer p) { super(p); }
        protected On_new_conn_Pointer_lsquic_conn_t() { allocate(); }
        private native void allocate();
        public native lsquic_conn_ctx_t call(Pointer stream_if_ctx,
                                                            lsquic_conn_t c);
    }
    public native On_new_conn_Pointer_lsquic_conn_t on_new_conn(); public native lsquic_stream_if on_new_conn(On_new_conn_Pointer_lsquic_conn_t setter);

    /** This is called when our side received GOAWAY frame.  After this,
     *  new streams should not be created.  The callback is optional.
     */
    public static class On_goaway_received_lsquic_conn_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_goaway_received_lsquic_conn_t(Pointer p) { super(p); }
        protected On_goaway_received_lsquic_conn_t() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c);
    }
    public native On_goaway_received_lsquic_conn_t on_goaway_received(); public native lsquic_stream_if on_goaway_received(On_goaway_received_lsquic_conn_t setter);
    public static class On_conn_closed_lsquic_conn_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_conn_closed_lsquic_conn_t(Pointer p) { super(p); }
        protected On_conn_closed_lsquic_conn_t() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c);
    }
    public native On_conn_closed_lsquic_conn_t on_conn_closed(); public native lsquic_stream_if on_conn_closed(On_conn_closed_lsquic_conn_t setter);

    /** If you need to initiate a connection, call lsquic_conn_make_stream().
     *  This will cause {@code on_new_stream' callback to be called when appropriate
     *  (this operation is delayed when maximum number of outgoing streams is
     *  reached).
     *
     *  After }on_close' is called, the stream is no longer accessible.
     */
    public static class On_new_stream_Pointer_lsquic_stream_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_new_stream_Pointer_lsquic_stream_t(Pointer p) { super(p); }
        protected On_new_stream_Pointer_lsquic_stream_t() { allocate(); }
        private native void allocate();
        public native lsquic_stream_ctx_t call(Pointer stream_if_ctx, lsquic_stream_t s);
    }
    public native On_new_stream_Pointer_lsquic_stream_t on_new_stream(); public native lsquic_stream_if on_new_stream(On_new_stream_Pointer_lsquic_stream_t setter);

    public static class On_read_lsquic_stream_t_lsquic_stream_ctx_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_read_lsquic_stream_t_lsquic_stream_ctx_t(Pointer p) { super(p); }
        protected On_read_lsquic_stream_t_lsquic_stream_ctx_t() { allocate(); }
        private native void allocate();
        public native void call(lsquic_stream_t s, lsquic_stream_ctx_t h);
    }
    public native On_read_lsquic_stream_t_lsquic_stream_ctx_t on_read(); public native lsquic_stream_if on_read(On_read_lsquic_stream_t_lsquic_stream_ctx_t setter);
    public static class On_write_lsquic_stream_t_lsquic_stream_ctx_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_write_lsquic_stream_t_lsquic_stream_ctx_t(Pointer p) { super(p); }
        protected On_write_lsquic_stream_t_lsquic_stream_ctx_t() { allocate(); }
        private native void allocate();
        public native void call(lsquic_stream_t s, lsquic_stream_ctx_t h);
    }
    public native On_write_lsquic_stream_t_lsquic_stream_ctx_t on_write(); public native lsquic_stream_if on_write(On_write_lsquic_stream_t_lsquic_stream_ctx_t setter);
    public static class On_close_lsquic_stream_t_lsquic_stream_ctx_t extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_close_lsquic_stream_t_lsquic_stream_ctx_t(Pointer p) { super(p); }
        protected On_close_lsquic_stream_t_lsquic_stream_ctx_t() { allocate(); }
        private native void allocate();
        public native void call(lsquic_stream_t s, lsquic_stream_ctx_t h);
    }
    public native On_close_lsquic_stream_t_lsquic_stream_ctx_t on_close(); public native lsquic_stream_if on_close(On_close_lsquic_stream_t_lsquic_stream_ctx_t setter);
    /* Called when datagram is ready to be written */
    public static class On_dg_write_lsquic_conn_t_Pointer_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_dg_write_lsquic_conn_t_Pointer_long(Pointer p) { super(p); }
        protected On_dg_write_lsquic_conn_t_Pointer_long() { allocate(); }
        private native void allocate();
        public native @Cast("ssize_t") long call(lsquic_conn_t c, Pointer arg1, @Cast("size_t") long arg2);
    }
    public native On_dg_write_lsquic_conn_t_Pointer_long on_dg_write(); public native lsquic_stream_if on_dg_write(On_dg_write_lsquic_conn_t_Pointer_long setter);
    /* Called when datagram is read from a packet.  This callback is required
     * when es_datagrams is true.  Take care to process it quickly, as this
     * is called during lsquic_engine_packet_in().
     */
    public static class On_datagram_lsquic_conn_t_Pointer_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_datagram_lsquic_conn_t_Pointer_long(Pointer p) { super(p); }
        protected On_datagram_lsquic_conn_t_Pointer_long() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t arg0, @Const Pointer buf, @Cast("size_t") long arg2);
    }
    public native On_datagram_lsquic_conn_t_Pointer_long on_datagram(); public native lsquic_stream_if on_datagram(On_datagram_lsquic_conn_t_Pointer_long setter);
    /* This callback in only called in client mode */
    /**
     * When handshake is completed, this optional callback is called.
     */
    public static class On_hsk_done_lsquic_conn_t_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_hsk_done_lsquic_conn_t_int(Pointer p) { super(p); }
        protected On_hsk_done_lsquic_conn_t_int() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c, @Cast("lsquic_hsk_status") int s);
    }
    public native On_hsk_done_lsquic_conn_t_int on_hsk_done(); public native lsquic_stream_if on_hsk_done(On_hsk_done_lsquic_conn_t_int setter);
    /**
     * When client receives a token in NEW_TOKEN frame, this callback is called.
     * The callback is optional.
     */
    public static class On_new_token_lsquic_conn_t_BytePointer_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_new_token_lsquic_conn_t_BytePointer_long(Pointer p) { super(p); }
        protected On_new_token_lsquic_conn_t_BytePointer_long() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c, @Cast("const unsigned char*") BytePointer token,
                                                            @Cast("size_t") long token_size);
    }
    public native On_new_token_lsquic_conn_t_BytePointer_long on_new_token(); public native lsquic_stream_if on_new_token(On_new_token_lsquic_conn_t_BytePointer_long setter);
    /**
     * This optional callback lets client record information needed to
     * perform a session resumption next time around.
     */
    public static class On_sess_resume_info_lsquic_conn_t_BytePointer_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_sess_resume_info_lsquic_conn_t_BytePointer_long(Pointer p) { super(p); }
        protected On_sess_resume_info_lsquic_conn_t_BytePointer_long() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c, @Cast("const unsigned char*") BytePointer arg1, @Cast("size_t") long arg2);
    }
    public native On_sess_resume_info_lsquic_conn_t_BytePointer_long on_sess_resume_info(); public native lsquic_stream_if on_sess_resume_info(On_sess_resume_info_lsquic_conn_t_BytePointer_long setter);
    /**
     * Optional callback is called as soon as the peer resets a stream.
     * The argument {@code how' is either 0, 1, or 2, meaning "read", "write", and
     * "read and write", respectively (just like in shutdown(2)).  This
     * signals the user to stop reading, writing, or both.
     *
     * Note that resets differ in gQUIC and IETF QUIC.  In gQUIC, }how' is
     * always 2; in IETF QUIC, {@code how' is either 0 or 1 because one can reset
     * just one direction in IETF QUIC.
     */
    public static class On_reset_lsquic_stream_t_lsquic_stream_ctx_t_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_reset_lsquic_stream_t_lsquic_stream_ctx_t_int(Pointer p) { super(p); }
        protected On_reset_lsquic_stream_t_lsquic_stream_ctx_t_int() { allocate(); }
        private native void allocate();
        public native void call(lsquic_stream_t s, lsquic_stream_ctx_t h, int how);
    }
    public native On_reset_lsquic_stream_t_lsquic_stream_ctx_t_int on_reset(); public native lsquic_stream_if on_reset(On_reset_lsquic_stream_t_lsquic_stream_ctx_t_int setter);
    /**
     * Optional callback is called when a CONNECTION_CLOSE frame is received.
     * This allows the application to log low-level diagnostic information about
     * errors received with the CONNECTION_CLOSE frame. If app_error is -1 then
     * it is considered unknown if this is an app_error or not.
     */
    public static class On_conncloseframe_received_lsquic_conn_t_int_long_BytePointer_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    On_conncloseframe_received_lsquic_conn_t_int_long_BytePointer_int(Pointer p) { super(p); }
        protected On_conncloseframe_received_lsquic_conn_t_int_long_BytePointer_int() { allocate(); }
        private native void allocate();
        public native void call(lsquic_conn_t c,
                                           int app_error, @Cast("uint64_t") long error_code,
                                           @Cast("const char*") BytePointer reason, int reason_len);
    }
    public native On_conncloseframe_received_lsquic_conn_t_int_long_BytePointer_int on_conncloseframe_received(); public native lsquic_stream_if on_conncloseframe_received(On_conncloseframe_received_lsquic_conn_t_int_long_BytePointer_int setter);
}
